[build-system]
requires = ["setuptools >= 64", "numpy >= 1.17", "cython"]
build-backend = "setuptools.build_meta"

[project]
name = "aimmd"
version = "0.9.2"
dependencies = ["numpy >= 1.17", "cython",
                "openpathsampling",
                # need mdtraj >= 1.11 to be able to type the mdtraj returns in _symmetry.pyx correctly
                "mdtraj >= 1.11",
                "networkx",
                "h5py >= 3",
                "asyncmd >= 0.4.1",
                ]
requires-python = ">=3.10"
authors = [{ name = "Hendrik Jung", email = "hendrik.jung@biophys.mpg.de"}]
maintainers = [{ name = "Hendrik Jung", email = "hendrik.jung@biophys.mpg.de"}]
description = """aimmd (AI for Molecular Mechanism Discovery) autonomously \
steers (a large number of) molecular dynamics simulations to efficiently sample\
 and understand rare transition events."""
readme = "README.md"
keywords = ["science", "MD", "Molecular Dynamics", "molecular-dynamics",
            "Path Sampling", "Transition Path Sampling", "TPS",
            "Machine Learning", "ML", "Artificial Intelligence", "AI",
            "committor", "commitment probability", "reaction coordinate", "RC",
            "high performance computing", "HPC",
            ]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "Natural Language :: English",
    "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Physics",
]

[project.optional-dependencies]
docs = ["sphinx", "myst-nb", "sphinx-book-theme"]
tests = ["pytest", "pytest-asyncio"]
tests-all = ["aimmd[tests]", "coverage", "pytest-cov"]
examples = ["jupyterlab", "ipywidgets", "tqdm", # for example notebooks
            "pooch",  # used to download LiCl example files from figshare
            "mdanalysis",  # used in distributed example state/descriptor funcs
            ]
dev = ["aimmd[docs,tests-all,examples]",
       "pylint",
       ]

[project.urls]
Documentation = "https://aimmd.readthedocs.io/en/latest/"
Repository = "https://github.com/bio-phys/aimmd.git"
Issues = "https://github.com/bio-phys/aimmd/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["aimmd*"]
namespaces = false

# TODO: typing!
#[tool.setuptools.package-data]
#aimmd = ["py.typed"]

# pylint configuration
[tool.pylint.main]
# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
fail-on = ["E"]

# Specify a score threshold under which the program will exit with error.
fail-under = 7

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
load-plugins = ["pylint.extensions.bad_builtin",
                "pylint.extensions.broad_try_clause",
                "pylint.extensions.check_elif",
                "pylint.extensions.code_style",
                "pylint.extensions.comparison_placement",
                "pylint.extensions.consider_refactoring_into_while_condition",
                "pylint.extensions.dict_init_mutate",
                "pylint.extensions.docparams",
                "pylint.extensions.eq_without_hash",
                "pylint.extensions.for_any_all",
                "pylint.extensions.overlapping_exceptions",
                "pylint.extensions.redefined_loop_name",
                "pylint.extensions.redefined_variable_type",
                "pylint.extensions.set_membership",
                "pylint.extensions.typing",
                ]

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run pylint.
py-version = "3.10"

[tool.pylint."messages control"]
# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
enable = ["all"]

[tool.pylint.design]
# increase maximum number of arguments for functions/methods (default=5)
max-args = 6
# but decrease maximum number of positional arguments (default=5)
max-positional-arguments = 4
